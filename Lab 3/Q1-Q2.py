# Amit Maindola (B20079)
# Lab Assignment 3
# Data Science 3


# Question 1
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statistics
df1 = pd.read_csv("pima-indians-diabetes.csv")
columns = ["pregs","plas","pres","skin","test","BMI","pedi","Age"]
for i in columns:
    q3=df1[i].quantile(0.75)
    q1=df1[i].quantile(0.25)
    iqr=q3-q1
    min1=q1-iqr*1.5
    max1=q3+iqr*1.5
    med=df1[i].median()
    length=df1[i].size
    for j in range(length):
        if df1[i][j]>max1 or df1[i][j]<min1:
            df1[i][j]=med

# Question 1 Part (a) Normalisation
print("\nQuestion 1 part (a)")
for i in columns:
    normalized=[]
    min1=df1[i].min()
    max1=df1[i].max()
    length=df1[i].size
    values=list(df1[i])
    for j in range(length):
        normalized.append(((values[j]-min1)*(12-5)/(max1-min1))+5)
    min2=min(normalized)
    max2=max(normalized)
# Comparing before normalisation and after noramalisation
    print("\nFor attribute:",i)
    print("Minimum before Normalization", min1)
    print("Maximum before Normalization", max1)
    print("Minimum after Normalization", min2)
    print("Maximum after Normalization", max2)


# Question 1 part (b) Standardization
print("\nQuestion 1 part (b)")
for i in columns:
    stddev=df1[i].std()
    mean=df1[i].mean()
    values=list(df1[i])
    length=df1[i].size
    standardize=[]
    for j in range(length):
        standardize.append((values[j]-mean)/(stddev))
    stddevNew=statistics.stdev(standardize)
    meanNew=statistics.mean(standardize)
# Comparing before normalisation and after noramalisation
    print("\nFor attribute:",i)
    print("Mean before standardize:",mean)
    print("Mean after standardize:",meanNew)
    print("Standard deviation before standardize:",stddev)
    print("Standard deviation after standardize:",stddevNew)



# Question 2
# Question 2 Part (a)
print("\nQuestion 2 part (a)")
mean = [0, 0] # given
cov = [[13, -3], [-3, 5]] #given
print("Sample of Data Generated by given function")
D = np.random.multivariate_normal(mean, cov, 1000) # creating the 2D array
x, y = [], []
for i in D:
    x.append(i[0])
    y.append(i[1])
# Plot of data point:
plt.scatter(x, y, color='b', marker='o',alpha=0.33 , label='Original Data Points')
plt.title('Original Data Points', loc='left')
plt.legend()
plt.show()

# Question 2 part (b)
print("\nQuestion 2 part (b)")
# Eigen values and Eigen Vectors:
eigenvalues, eigenvectors = np.linalg.eig(cov)
endPoints = np.array([[eigenvectors[0][0], eigenvectors[1][0]],[eigenvectors[0][1], eigenvectors[1][1]]])

x0, y0, u0, v0 = 0,0,eigenvalues[0] * eigenvectors[0][0],eigenvalues[0] * eigenvectors[1][0]
x1, y1, u1, v1 = 0,0,eigenvalues[1] * eigenvectors[0][1],eigenvalues[1] * eigenvectors[1][1]
plt.scatter(x, y, color='b', marker='o',alpha=0.33 ,label='original data points')
plt.legend()
plt.quiver(x0, y0, u0, v0,angles ='xy', scale_units='xy', scale=1, width=0.01)
plt.quiver(x1, y1, u1, v1, angles='xy', scale_units='xy', scale=1, width=0.01, label='Eigen Vectors')
plt.legend()
plt.show()

# Question 2 part (c)
print("\nQuestion 2 part (c)")
pca_list = [[], []]
for i in range(2): # for ploting two projection plots
    plt.scatter(x, y, color='b', marker='o',alpha=0.33, label='original D points') # initital data
    plt.legend()
    plt.quiver(x0, y0, u0, v0, angles='xy', scale_units='xy', scale=1, width=0.01)
    plt.quiver(x1, y1, u1, v1, angles='xy', scale_units='xy', scale=1, width=0.01, label='Eigen Vectors')
    plt.legend()
    # Projection of data points
    projection_x = [] # x coordinates of projections
    projection_y = [] # y coordinates of projections
    for j in D:
        p = np.dot(j, endPoints[i]) / np.linalg.norm(endPoints[i])
        projection_x.append(p * endPoints[i][0] / np.linalg.norm(endPoints[i]))
        projection_y.append(p * endPoints[i][1] / np.linalg.norm(endPoints[i]))
        pca_list[i].append(p)
    plt.scatter(projection_x, projection_y, marker='x', color="r",label='Projected data points')
    plt.legend()
    plt.xlabel("X-axis")
    plt.ylabel("Y-axis")
    plt.title("Scatter Plot of 2D 1000 sample generated data", loc='left')
    plt.show()

# Question 2 part (d)
print("\nQuestion 2 part (d)")
# performing reconstruction of data from two eigenvectors
D2 = []
for m in range(len(D)):
    table = []
    for y in range(2):
        table.append(pca_list[0][m] * eigenvectors[y][0] + pca_list[1][m] * eigenvectors[y][1])
    D2.append(table)

print(np.array(D2))
# Estimating reconstruction error:
error = 0
for i in range(len(D)):
    error =   ((D[i][0] - D2[i][0]) ** 2 + (D[i][1] - D2[i][1]) ** 2)**(0.5)
error=error/len(D)
print("After performing PCA and reconstruction: ")
print("Reconstruction error:",error)